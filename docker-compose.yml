version: "3.9"

services:
  # Redis (Cache + Filas para Celery)
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Supabase Local (PostgreSQL + Auth)
  supabase-db:
    image: supabase/postgres:15.1.0.117
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: postgres
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./services/api/supabase/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant (Vector DB para Knowledge Base)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - app-network

  # LiteLLM Gateway (Multi-model AI)
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@supabase-db:5432/postgres
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-master-dev}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      # AI Provider Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      # Monitoring
      PROMETHEUS_URL: http://prometheus:9090
      # Logging
      LITELLM_LOG_LEVEL: INFO
    volumes:
      - ./config/litellm_config.yaml:/app/config.yaml
    depends_on:
      supabase-db:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["--config", "/app/config.yaml", "--port", "4000", "--num_workers", "4"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI Gateway Customizado
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # Gateway principal
    environment:
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      BACKEND_URL: http://backend:8000
      LITELLM_URL: http://litellm:4000
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
    volumes:
      - ./services/gateway:/app
    depends_on:
      - redis
      - backend
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080", "--reload"]
    networks:
      - app-network

  # FastAPI Backend Principal
  backend:
    build:
      context: ./services/api
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@supabase-db:5432/postgres
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      # Celery
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      # LiteLLM
      LITELLM_URL: http://litellm:4000
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-master-dev}
      # Qdrant
      QDRANT_URL: http://qdrant:6333
      # Auth
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
      # Evolution API (WhatsApp)
      EVOLUTION_API_URL: ${EVOLUTION_API_URL:-http://evolution:8080}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
      # Instagram
      INSTAGRAM_ACCESS_TOKEN: ${INSTAGRAM_ACCESS_TOKEN}
      INSTAGRAM_WEBHOOK_VERIFY_TOKEN: ${INSTAGRAM_WEBHOOK_VERIFY_TOKEN}
      # Google
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    volumes:
      - ./services/api:/app
      - /app/__pycache__
    depends_on:
      - redis
      - supabase-db
      - litellm
      - qdrant
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - app-network

  # Celery Worker (Processar filas)
  celery-worker:
    build:
      context: ./services/api
      dockerfile: Dockerfile.dev
    environment:
      # Mesmas envs do backend
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@supabase-db:5432/postgres
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      LITELLM_URL: http://litellm:4000
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-master-dev}
      QDRANT_URL: http://qdrant:6333
      EVOLUTION_API_URL: ${EVOLUTION_API_URL:-http://evolution:8080}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
    volumes:
      - ./services/api:/app
    depends_on:
      - redis
      - supabase-db
      - litellm
    command: ["celery", "-A", "app.workers", "worker", "--loglevel=info", "--concurrency=4"]
    networks:
      - app-network

  # Celery Beat (Tarefas agendadas)
  celery-beat:
    build:
      context: ./services/api
      dockerfile: Dockerfile.dev
    environment:
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
    volumes:
      - ./services/api:/app
    depends_on:
      - redis
    command: ["celery", "-A", "app.workers", "beat", "--loglevel=info"]
    networks:
      - app-network

  # Jarvis AI (Worker Celery dedicado para analytics)
  jarvis-worker:
    build:
      context: ./services/api
      dockerfile: Dockerfile.dev
    environment:
      # Mesmas envs básicas
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@supabase-db:5432/postgres
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      LITELLM_URL: http://litellm:4000
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-master-dev}
      # Jarvis específico
      JARVIS_QUEUE: jarvis_tasks
    volumes:
      - ./services/api:/app
    depends_on:
      - redis
      - supabase-db
    command: ["celery", "-A", "app.workers", "worker", "-Q", "jarvis_tasks", "--loglevel=info", "-n", "jarvis@%h"]
    networks:
      - app-network

  # Next.js Frontend (Dashboard)
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080  # Aponta para o Gateway
      NEXT_PUBLIC_WS_URL: ws://localhost:8080
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - gateway
    networks:
      - app-network

  # Evolution API Instance (WhatsApp) - Dev Only
  evolution:
    image: atendai/evolution-api:latest
    ports:
      - "8085:8080"
    environment:
      AUTHENTICATION_TYPE: apikey
      AUTHENTICATION_API_KEY: ${EVOLUTION_API_KEY}
      AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES: true
      WEBHOOK_GLOBAL_URL: http://backend:8000/webhooks/evolution
      WEBHOOK_GLOBAL_ENABLED: true
      DATABASE_ENABLED: true
      DATABASE_CONNECTION_URI: postgresql://postgres:${DB_PASSWORD:-postgres}@supabase-db:5432/evolution
      REDIS_ENABLED: true
      REDIS_URI: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
    depends_on:
      - supabase-db
      - redis
    networks:
      - app-network

  # Flower (Celery Dashboard)
  flower:
    image: mher/flower:latest
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379/0
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: admin:${FLOWER_PASSWORD:-admin}
    depends_on:
      - redis
    networks:
      - app-network

volumes:
  supabase_data:
  redis_data:
  qdrant_data:

networks:
  app-network:
    driver: bridge
