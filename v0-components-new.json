{"name":"b_Tahm0vgLaCU","type":"registry:block","dependencies":["next-themes","recharts","tailwindcss","@xyflow/react","zustand","nanoid"],"devDependencies":[],"registryDependencies":["toast","button","sheet","avatar","dropdown-menu","command","popover","card","tabs","badge","input","scroll-area","separator","label","textarea","slider"],"files":[{"path":"app/layout.tsx","content":"import type React from \"react\"\nimport { Inter } from \"next/font/google\"\nimport { ThemeProvider } from \"@/components/theme-provider\"\nimport \"./globals.css\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport const metadata = {\n  title: \"Agentes de Conversão\",\n  description: \"Plataforma de agentes conversacionais para aumentar suas conversões\",\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"pt-BR\" suppressHydrationWarning>\n      <body className={inter.className}>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem disableTransitionOnChange>\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}\n","type":"registry:page","target":"app/layout.tsx"},{"path":"app/(dashboard)/layout.tsx","content":"import type React from \"react\"\nimport { DashboardNav } from \"@/components/dashboard/dashboard-nav\"\nimport { DashboardHeader } from \"@/components/dashboard/dashboard-header\"\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { MobileNav } from \"@/components/dashboard/mobile-nav\"\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <DashboardHeader />\n      <div className=\"container flex-1 items-start md:grid md:grid-cols-[220px_minmax(0,1fr)] md:gap-6 lg:grid-cols-[240px_minmax(0,1fr)] lg:gap-10\">\n        <aside className=\"fixed top-14 z-30 -ml-2 hidden h-[calc(100vh-3.5rem)] w-full shrink-0 overflow-y-auto border-r md:sticky md:block\">\n          <DashboardNav />\n        </aside>\n        <main className=\"flex w-full flex-col overflow-hidden\">\n          <MobileNav />\n          <div className=\"pb-12 pt-8\">{children}</div>\n        </main>\n      </div>\n      <Toaster />\n    </div>\n  )\n}\n","type":"registry:page","target":"app/(dashboard)/layout.tsx"},{"path":"app/(auth)/layout.tsx","content":"import type React from \"react\"\nimport { AuthHeader } from \"@/components/auth/auth-header\"\nimport { Toaster } from \"@/components/ui/toaster\"\n\nexport default function AuthLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <AuthHeader />\n      <main className=\"flex flex-1 items-center justify-center py-10\">{children}</main>\n      <Toaster />\n    </div>\n  )\n}\n","type":"registry:page","target":"app/(auth)/layout.tsx"},{"path":"app/(public)/layout.tsx","content":"import type React from \"react\"\nimport { PublicHeader } from \"@/components/public/public-header\"\nimport { PublicFooter } from \"@/components/public/public-footer\"\nimport { Toaster } from \"@/components/ui/toaster\"\n\nexport default function PublicLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <PublicHeader />\n      <main className=\"flex-1\">{children}</main>\n      <PublicFooter />\n      <Toaster />\n    </div>\n  )\n}\n","type":"registry:page","target":"app/(public)/layout.tsx"},{"path":"components/dashboard/dashboard-header.tsx","content":"import Link from \"next/link\"\nimport { UserNav } from \"@/components/dashboard/user-nav\"\nimport { ModeToggle } from \"@/components/mode-toggle\"\nimport { Button } from \"@/components/ui/button\"\nimport { Search } from \"lucide-react\"\nimport { OrganizationSwitcher } from \"@/components/dashboard/organization-switcher\"\nimport { NotificationsDropdown } from \"@/components/dashboard/notifications-dropdown\"\n\nexport function DashboardHeader() {\n  return (\n    <header className=\"sticky top-0 z-40 border-b bg-background\">\n      <div className=\"container flex h-14 items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/dashboard\" className=\"flex items-center space-x-2\">\n            <span className=\"font-bold text-xl\">AC</span>\n          </Link>\n          <OrganizationSwitcher />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\" className=\"h-8 gap-1\">\n            <Search className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline-block\">Buscar</span>\n            <span className=\"hidden sm:inline-block text-muted-foreground\">\n              <kbd className=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\">\n                <span className=\"text-xs\">⌘</span>K\n              </kbd>\n            </span>\n          </Button>\n          <NotificationsDropdown />\n          <ModeToggle />\n          <UserNav />\n        </div>\n      </div>\n    </header>\n  )\n}\n","type":"registry:component"},{"path":"components/dashboard/dashboard-nav.tsx","content":"import type React from \"react\"\nimport Link from \"next/link\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  BarChart3,\n  Bot,\n  Brain,\n  FileText,\n  FlowerIcon as FlowIcon,\n  Home,\n  MessageSquare,\n  Settings,\n  Users,\n  Zap,\n} from \"lucide-react\"\n\ninterface NavItem {\n  title: string\n  href: string\n  icon: React.ReactNode\n  submenu?: { title: string; href: string }[]\n}\n\nconst navItems: NavItem[] = [\n  {\n    title: \"Dashboard\",\n    href: \"/dashboard\",\n    icon: <Home className=\"mr-2 h-4 w-4\" />,\n  },\n  {\n    title: \"Agentes\",\n    href: \"/agents\",\n    icon: <Bot className=\"mr-2 h-4 w-4\" />,\n    submenu: [\n      { title: \"Todos os Agentes\", href: \"/agents\" },\n      { title: \"Criar Agente\", href: \"/agents/new\" },\n    ],\n  },\n  {\n    title: \"AgentStudio\",\n    href: \"/agent-studio\",\n    icon: <FlowIcon className=\"mr-2 h-4 w-4\" />,\n    submenu: [\n      { title: \"Meus Fluxos\", href: \"/agent-studio\" },\n      { title: \"Templates\", href: \"/agent-studio/templates\" },\n    ],\n  },\n  {\n    title: \"Conversas\",\n    href: \"/conversations\",\n    icon: <MessageSquare className=\"mr-2 h-4 w-4\" />,\n    submenu: [\n      { title: \"Todas as Conversas\", href: \"/conversations\" },\n      { title: \"Conversas Ativas\", href: \"/conversations/active\" },\n      { title: \"Arquivadas\", href: \"/conversations/archived\" },\n    ],\n  },\n  {\n    title: \"Conhecimento\",\n    href: \"/knowledge\",\n    icon: <Brain className=\"mr-2 h-4 w-4\" />,\n    submenu: [\n      { title: \"Documentos\", href: \"/knowledge/documents\" },\n      { title: \"Upload\", href: \"/knowledge/upload\" },\n      { title: \"Conectores\", href: \"/knowledge/mcp\" },\n    ],\n  },\n  {\n    title: \"Analytics\",\n    href: \"/analytics\",\n    icon: <BarChart3 className=\"mr-2 h-4 w-4\" />,\n    submenu: [\n      { title: \"Visão Geral\", href: \"/analytics\" },\n      { title: \"Conversas\", href: \"/analytics/conversations\" },\n      { title: \"Conversões\", href: \"/analytics/conversion\" },\n    ],\n  },\n  {\n    title: \"Integrações\",\n    href: \"/integrations\",\n    icon: <Zap className=\"mr-2 h-4 w-4\" />,\n  },\n  {\n    title: \"Time\",\n    href: \"/team\",\n    icon: <Users className=\"mr-2 h-4 w-4\" />,\n  },\n  {\n    title: \"Documentação\",\n    href: \"https://docs.agentesdeconversao.ai\",\n    icon: <FileText className=\"mr-2 h-4 w-4\" />,\n  },\n  {\n    title: \"Configurações\",\n    href: \"/settings\",\n    icon: <Settings className=\"mr-2 h-4 w-4\" />,\n  },\n]\n\nexport function DashboardNav() {\n  return (\n    <nav className=\"grid items-start gap-2 px-2 py-4 text-sm\">\n      {navItems.map((item, index) => (\n        <div key={index} className=\"pb-1\">\n          <Link\n            href={item.href}\n            className={cn(\n              \"group flex items-center rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground\",\n            )}\n          >\n            {item.icon}\n            <span>{item.title}</span>\n          </Link>\n          {item.submenu && (\n            <div className=\"ml-6 mt-1 space-y-1\">\n              {item.submenu.map((subitem, subindex) => (\n                <Link\n                  key={subindex}\n                  href={subitem.href}\n                  className=\"block rounded-md px-3 py-1.5 text-sm hover:bg-accent hover:text-accent-foreground\"\n                >\n                  {subitem.title}\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n      ))}\n    </nav>\n  )\n}\n","type":"registry:component"},{"path":"components/dashboard/mobile-nav.tsx","content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\"\nimport { Menu } from \"lucide-react\"\nimport { DashboardNav } from \"@/components/dashboard/dashboard-nav\"\n\nexport function MobileNav() {\n  const [open, setOpen] = useState(false)\n\n  return (\n    <Sheet open={open} onOpenChange={setOpen}>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" className=\"md:hidden mt-4 ml-4\">\n          <Menu className=\"h-5 w-5\" />\n          <span className=\"sr-only\">Toggle Menu</span>\n        </Button>\n      </SheetTrigger>\n      <SheetContent side=\"left\" className=\"pr-0\">\n        <DashboardNav />\n      </SheetContent>\n    </Sheet>\n  )\n}\n","type":"registry:component"},{"path":"components/dashboard/user-nav.tsx","content":"\"use client\"\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { LogOut, Settings, User } from \"lucide-react\"\n\nexport function UserNav() {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src=\"/placeholder.svg?height=32&width=32\" alt=\"Avatar\" />\n            <AvatarFallback>AC</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">Usuário Demo</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">usuario@exemplo.com</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem>\n            <User className=\"mr-2 h-4 w-4\" />\n            <span>Perfil</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <Settings className=\"mr-2 h-4 w-4\" />\n            <span>Configurações</span>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          <span>Sair</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n","type":"registry:component"},{"path":"components/dashboard/organization-switcher.tsx","content":"\"use client\"\n\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { useState } from \"react\"\n\nconst organizations = [\n  {\n    value: \"minha-empresa\",\n    label: \"Minha Empresa\",\n  },\n  {\n    value: \"empresa-teste\",\n    label: \"Empresa Teste\",\n  },\n]\n\nexport function OrganizationSwitcher() {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState(\"minha-empresa\")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-[180px] justify-between\">\n          {value ? organizations.find((organization) => organization.value === value)?.label : \"Selecione...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[180px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Buscar organização...\" />\n          <CommandList>\n            <CommandEmpty>Nenhuma organização encontrada.</CommandEmpty>\n            <CommandGroup>\n              {organizations.map((organization) => (\n                <CommandItem\n                  key={organization.value}\n                  value={organization.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check className={cn(\"mr-2 h-4 w-4\", value === organization.value ? \"opacity-100\" : \"opacity-0\")} />\n                  {organization.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n","type":"registry:component"},{"path":"components/dashboard/notifications-dropdown.tsx","content":"\"use client\"\n\nimport { Bell } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nconst notifications = [\n  {\n    id: 1,\n    title: \"Novo agente criado\",\n    description: \"Seu agente 'Assistente de Vendas' foi criado com sucesso.\",\n    time: \"Há 5 minutos\",\n    read: false,\n  },\n  {\n    id: 2,\n    title: \"Conversa transferida\",\n    description: \"Uma conversa foi transferida para você por João Silva.\",\n    time: \"Há 1 hora\",\n    read: true,\n  },\n  {\n    id: 3,\n    title: \"Documento processado\",\n    description: \"Seu documento 'Manual de Produtos' foi processado com sucesso.\",\n    time: \"Há 3 horas\",\n    read: true,\n  },\n]\n\nexport function NotificationsDropdown() {\n  const unreadCount = notifications.filter((n) => !n.read).length\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" className=\"relative\">\n          <Bell className=\"h-4 w-4\" />\n          {unreadCount > 0 && (\n            <span className=\"absolute -right-1 -top-1 flex h-4 w-4 items-center justify-center rounded-full bg-primary text-[10px] text-primary-foreground\">\n              {unreadCount}\n            </span>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-80\" align=\"end\">\n        <DropdownMenuLabel>Notificações</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <div className=\"max-h-[300px] overflow-y-auto\">\n          <DropdownMenuGroup>\n            {notifications.map((notification) => (\n              <DropdownMenuItem key={notification.id} className=\"cursor-pointer\">\n                <div className=\"flex flex-col space-y-1 py-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className={`text-sm font-medium ${!notification.read ? \"text-primary\" : \"\"}`}>\n                      {notification.title}\n                    </p>\n                    <span className=\"text-xs text-muted-foreground\">{notification.time}</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">{notification.description}</p>\n                </div>\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuGroup>\n        </div>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem className=\"cursor-pointer justify-center\">\n          <span className=\"text-sm text-primary\">Ver todas as notificações</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n","type":"registry:component"},{"path":"components/mode-toggle.tsx","content":"\"use client\"\n\nimport { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\n\nexport function ModeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Alternar tema</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>Claro</DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>Escuro</DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>Sistema</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n","type":"registry:component"},{"path":"components/auth/auth-header.tsx","content":"import Link from \"next/link\"\n\nexport function AuthHeader() {\n  return (\n    <header className=\"sticky top-0 z-40 border-b bg-background\">\n      <div className=\"container flex h-14 items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          <span className=\"font-bold text-xl\">Agentes de Conversão</span>\n        </Link>\n      </div>\n    </header>\n  )\n}\n","type":"registry:component"},{"path":"components/public/public-header.tsx","content":"import Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { ModeToggle } from \"@/components/mode-toggle\"\n\nexport function PublicHeader() {\n  return (\n    <header className=\"sticky top-0 z-40 border-b bg-background\">\n      <div className=\"container flex h-16 items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          <span className=\"font-bold text-xl\">Agentes de Conversão</span>\n        </Link>\n        <nav className=\"hidden md:flex items-center space-x-6 text-sm font-medium\">\n          <Link href=\"/recursos\" className=\"transition-colors hover:text-foreground/80\">\n            Recursos\n          </Link>\n          <Link href=\"/precos\" className=\"transition-colors hover:text-foreground/80\">\n            Preços\n          </Link>\n          <Link href=\"/casos-de-uso\" className=\"transition-colors hover:text-foreground/80\">\n            Casos de Uso\n          </Link>\n          <Link href=\"/blog\" className=\"transition-colors hover:text-foreground/80\">\n            Blog\n          </Link>\n          <Link href=\"/contato\" className=\"transition-colors hover:text-foreground/80\">\n            Contato\n          </Link>\n        </nav>\n        <div className=\"flex items-center space-x-4\">\n          <ModeToggle />\n          <Link href=\"https://login.agentesdeconversao.ai\">\n            <Button variant=\"outline\">Entrar</Button>\n          </Link>\n          <Link href=\"https://login.agentesdeconversao.ai/signup\">\n            <Button>Começar Grátis</Button>\n          </Link>\n        </div>\n      </div>\n    </header>\n  )\n}\n","type":"registry:component"},{"path":"components/public/public-footer.tsx","content":"import Link from \"next/link\"\n\nexport function PublicFooter() {\n  return (\n    <footer className=\"border-t bg-background\">\n      <div className=\"container py-10\">\n        <div className=\"grid grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-5\">\n          <div className=\"space-y-3\">\n            <h3 className=\"text-lg font-medium\">Agentes de Conversão</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Transforme suas conversas em conversões com agentes de IA inteligentes.\n            </p>\n          </div>\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-medium\">Produto</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/recursos\" className=\"text-muted-foreground hover:text-foreground\">\n                  Recursos\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/precos\" className=\"text-muted-foreground hover:text-foreground\">\n                  Preços\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/casos-de-uso\" className=\"text-muted-foreground hover:text-foreground\">\n                  Casos de Uso\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-medium\">Empresa</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/sobre\" className=\"text-muted-foreground hover:text-foreground\">\n                  Sobre\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/blog\" className=\"text-muted-foreground hover:text-foreground\">\n                  Blog\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contato\" className=\"text-muted-foreground hover:text-foreground\">\n                  Contato\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-medium\">Legal</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/privacidade\" className=\"text-muted-foreground hover:text-foreground\">\n                  Privacidade\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/termos\" className=\"text-muted-foreground hover:text-foreground\">\n                  Termos\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-medium\">Suporte</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"https://docs.agentesdeconversao.ai\" className=\"text-muted-foreground hover:text-foreground\">\n                  Documentação\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/suporte\" className=\"text-muted-foreground hover:text-foreground\">\n                  Central de Ajuda\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/status\" className=\"text-muted-foreground hover:text-foreground\">\n                  Status\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"mt-10 border-t pt-6 text-center text-sm text-muted-foreground\">\n          <p>&copy; {new Date().getFullYear()} Agentes de Conversão. Todos os direitos reservados.</p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n","type":"registry:component"},{"path":"app/(dashboard)/page.tsx","content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Button } from \"@/components/ui/button\"\nimport { Bot, MessageSquare, TrendingUp, Users } from \"lucide-react\"\nimport { Overview } from \"@/components/dashboard/overview\"\nimport { RecentConversations } from \"@/components/dashboard/recent-conversations\"\n\nexport default function DashboardPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">Bem-vindo ao seu dashboard de Agentes de Conversão.</p>\n      </div>\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"reports\">Relatórios</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total de Conversas</CardTitle>\n                <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">1,248</div>\n                <p className=\"text-xs text-muted-foreground\">+20.1% em relação ao mês passado</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Taxa de Conversão</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">24.3%</div>\n                <p className=\"text-xs text-muted-foreground\">+4.5% em relação ao mês passado</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Agentes Ativos</CardTitle>\n                <Bot className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">7</div>\n                <p className=\"text-xs text-muted-foreground\">+2 em relação ao mês passado</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Usuários Ativos</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">573</div>\n                <p className=\"text-xs text-muted-foreground\">+201 em relação ao mês passado</p>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-7\">\n            <Card className=\"col-span-4\">\n              <CardHeader>\n                <CardTitle>Visão Geral</CardTitle>\n                <CardDescription>Conversas e conversões nos últimos 30 dias.</CardDescription>\n              </CardHeader>\n              <CardContent className=\"pl-2\">\n                <Overview />\n              </CardContent>\n            </Card>\n            <Card className=\"col-span-3\">\n              <CardHeader>\n                <CardTitle>Conversas Recentes</CardTitle>\n                <CardDescription>Últimas conversas com seus agentes.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <RecentConversations />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Analytics Detalhado</CardTitle>\n              <CardDescription>Análise detalhada de performance dos seus agentes.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"h-[450px] flex items-center justify-center\">\n              <div className=\"text-center space-y-3\">\n                <p className=\"text-muted-foreground\">Selecione um período para visualizar os dados detalhados.</p>\n                <Button>Ver Analytics Completo</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"reports\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Relatórios</CardTitle>\n              <CardDescription>Gere e visualize relatórios personalizados.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"h-[450px] flex items-center justify-center\">\n              <div className=\"text-center space-y-3\">\n                <p className=\"text-muted-foreground\">Nenhum relatório gerado recentemente.</p>\n                <Button>Gerar Novo Relatório</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","type":"registry:page","target":"app/(dashboard)/page.tsx"},{"path":"components/dashboard/overview.tsx","content":"\"use client\"\n\nimport { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\n\nconst data = [\n  {\n    name: \"01/05\",\n    conversas: 40,\n    conversoes: 24,\n  },\n  {\n    name: \"08/05\",\n    conversas: 30,\n    conversoes: 13,\n  },\n  {\n    name: \"15/05\",\n    conversas: 20,\n    conversoes: 8,\n  },\n  {\n    name: \"22/05\",\n    conversas: 27,\n    conversoes: 12,\n  },\n  {\n    name: \"29/05\",\n    conversas: 18,\n    conversoes: 7,\n  },\n  {\n    name: \"05/06\",\n    conversas: 23,\n    conversoes: 11,\n  },\n  {\n    name: \"12/06\",\n    conversas: 34,\n    conversoes: 19,\n  },\n]\n\nexport function Overview() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} />\n        <YAxis stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"conversas\" fill=\"#adfa1d\" radius={[4, 4, 0, 0]} />\n        <Bar dataKey=\"conversoes\" fill=\"#0ea5e9\" radius={[4, 4, 0, 0]} />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n","type":"registry:component"},{"path":"components/dashboard/recent-conversations.tsx","content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\n\nconst conversations = [\n  {\n    id: \"1\",\n    user: \"João Silva\",\n    message: \"Olá, gostaria de saber mais sobre os planos de assinatura.\",\n    time: \"Há 5 minutos\",\n    agent: \"Assistente de Vendas\",\n    status: \"active\",\n  },\n  {\n    id: \"2\",\n    user: \"Maria Oliveira\",\n    message: \"Como faço para cancelar minha assinatura?\",\n    time: \"Há 15 minutos\",\n    agent: \"Suporte ao Cliente\",\n    status: \"active\",\n  },\n  {\n    id: \"3\",\n    user: \"Pedro Santos\",\n    message: \"Preciso de ajuda com a integração da API.\",\n    time: \"Há 1 hora\",\n    agent: \"Suporte Técnico\",\n    status: \"closed\",\n  },\n  {\n    id: \"4\",\n    user: \"Ana Costa\",\n    message: \"Quais são os recursos disponíveis no plano Pro?\",\n    time: \"Há 3 horas\",\n    agent: \"Assistente de Vendas\",\n    status: \"closed\",\n  },\n]\n\nexport function RecentConversations() {\n  return (\n    <div className=\"space-y-8\">\n      {conversations.map((conversation) => (\n        <div key={conversation.id} className=\"flex items-start gap-4\">\n          <Avatar className=\"h-9 w-9\">\n            <AvatarImage\n              src={`/placeholder.svg?height=36&width=36&query=${conversation.user}`}\n              alt={conversation.user}\n            />\n            <AvatarFallback>\n              {conversation.user\n                .split(\" \")\n                .map((n) => n[0])\n                .join(\"\")}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"space-y-1 flex-1\">\n            <div className=\"flex items-center gap-2\">\n              <p className=\"text-sm font-medium leading-none\">{conversation.user}</p>\n              <div\n                className={`h-2 w-2 rounded-full ${conversation.status === \"active\" ? \"bg-green-500\" : \"bg-gray-300\"}`}\n              />\n              <p className=\"text-xs text-muted-foreground\">{conversation.time}</p>\n            </div>\n            <p className=\"text-sm text-muted-foreground line-clamp-1\">{conversation.message}</p>\n            <p className=\"text-xs\">\n              <span className=\"font-medium\">Agente:</span> {conversation.agent}\n            </p>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" className=\"ml-auto\">\n            Ver\n          </Button>\n        </div>\n      ))}\n      <Button variant=\"outline\" className=\"w-full\">\n        Ver todas as conversas\n      </Button>\n    </div>\n  )\n}\n","type":"registry:component"},{"path":"app/(dashboard)/agents/page.tsx","content":"import { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Bot, Copy, Edit, MoreHorizontal, Plus, Trash } from \"lucide-react\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport Link from \"next/link\"\n\nconst agents = [\n  {\n    id: \"1\",\n    name: \"Assistente de Vendas\",\n    description: \"Agente especializado em converter leads em vendas.\",\n    conversations: 245,\n    conversionRate: \"24%\",\n    status: \"active\",\n  },\n  {\n    id: \"2\",\n    name: \"Suporte ao Cliente\",\n    description: \"Agente para atendimento e suporte ao cliente.\",\n    conversations: 532,\n    conversionRate: \"N/A\",\n    status: \"active\",\n  },\n  {\n    id: \"3\",\n    name: \"Qualificação de Leads\",\n    description: \"Agente para qualificar leads antes de enviar para a equipe de vendas.\",\n    conversations: 187,\n    conversionRate: \"32%\",\n    status: \"active\",\n  },\n  {\n    id: \"4\",\n    name: \"FAQ Bot\",\n    description: \"Agente para responder perguntas frequentes.\",\n    conversations: 423,\n    conversionRate: \"N/A\",\n    status: \"inactive\",\n  },\n]\n\nexport default function AgentsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Agentes</h1>\n          <p className=\"text-muted-foreground\">Gerencie seus agentes de conversão.</p>\n        </div>\n        <Link href=\"/agents/new\">\n          <Button>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Novo Agente\n          </Button>\n        </Link>\n      </div>\n      <Tabs defaultValue=\"all\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"all\">Todos</TabsTrigger>\n          <TabsTrigger value=\"active\">Ativos</TabsTrigger>\n          <TabsTrigger value=\"inactive\">Inativos</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {agents.map((agent) => (\n              <Card key={agent.id} className={agent.status === \"inactive\" ? \"opacity-70\" : \"\"}>\n                <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n                  <div className=\"space-y-1\">\n                    <CardTitle className=\"flex items-center\">\n                      <Bot className=\"mr-2 h-4 w-4\" />\n                      {agent.name}\n                    </CardTitle>\n                    <CardDescription>{agent.description}</CardDescription>\n                  </div>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\">\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                        <span className=\"sr-only\">Abrir menu</span>\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>Ações</DropdownMenuLabel>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem>\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                        Editar\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Copy className=\"mr-2 h-4 w-4\" />\n                        Duplicar\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem className=\"text-destructive\">\n                        <Trash className=\"mr-2 h-4 w-4\" />\n                        Excluir\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Conversas</p>\n                      <p className=\"font-medium\">{agent.conversations}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Taxa de Conversão</p>\n                      <p className=\"font-medium\">{agent.conversionRate}</p>\n                    </div>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <div className=\"flex w-full justify-between\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      Testar\n                    </Button>\n                    <Link href={`/agents/${agent.id}`}>\n                      <Button size=\"sm\">Gerenciar</Button>\n                    </Link>\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n        <TabsContent value=\"active\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {agents\n              .filter((a) => a.status === \"active\")\n              .map((agent) => (\n                <Card key={agent.id}>\n                  <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"flex items-center\">\n                        <Bot className=\"mr-2 h-4 w-4\" />\n                        {agent.name}\n                      </CardTitle>\n                      <CardDescription>{agent.description}</CardDescription>\n                    </div>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">Abrir menu</span>\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuLabel>Ações</DropdownMenuLabel>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Editar\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <Copy className=\"mr-2 h-4 w-4\" />\n                          Duplicar\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem className=\"text-destructive\">\n                          <Trash className=\"mr-2 h-4 w-4\" />\n                          Excluir\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Conversas</p>\n                        <p className=\"font-medium\">{agent.conversations}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Taxa de Conversão</p>\n                        <p className=\"font-medium\">{agent.conversionRate}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                  <CardFooter>\n                    <div className=\"flex w-full justify-between\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Testar\n                      </Button>\n                      <Link href={`/agents/${agent.id}`}>\n                        <Button size=\"sm\">Gerenciar</Button>\n                      </Link>\n                    </div>\n                  </CardFooter>\n                </Card>\n              ))}\n          </div>\n        </TabsContent>\n        <TabsContent value=\"inactive\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {agents\n              .filter((a) => a.status === \"inactive\")\n              .map((agent) => (\n                <Card key={agent.id} className=\"opacity-70\">\n                  <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"flex items-center\">\n                        <Bot className=\"mr-2 h-4 w-4\" />\n                        {agent.name}\n                      </CardTitle>\n                      <CardDescription>{agent.description}</CardDescription>\n                    </div>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">Abrir menu</span>\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuLabel>Ações</DropdownMenuLabel>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Editar\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <Copy className=\"mr-2 h-4 w-4\" />\n                          Duplicar\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem className=\"text-destructive\">\n                          <Trash className=\"mr-2 h-4 w-4\" />\n                          Excluir\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Conversas</p>\n                        <p className=\"font-medium\">{agent.conversations}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Taxa de Conversão</p>\n                        <p className=\"font-medium\">{agent.conversionRate}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                  <CardFooter>\n                    <div className=\"flex w-full justify-between\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Testar\n                      </Button>\n                      <Link href={`/agents/${agent.id}`}>\n                        <Button size=\"sm\">Gerenciar</Button>\n                      </Link>\n                    </div>\n                  </CardFooter>\n                </Card>\n              ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","type":"registry:page","target":"app/(dashboard)/agents/page.tsx"},{"path":"app/(dashboard)/agent-studio/page.tsx","content":"import { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Copy, Edit, FlowerIcon as FlowIcon, MoreHorizontal, Plus, Trash } from \"lucide-react\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport Link from \"next/link\"\nimport { Badge } from \"@/components/ui/badge\"\n\nconst flows = [\n  {\n    id: \"1\",\n    name: \"Fluxo de Vendas\",\n    description: \"Fluxo para converter leads em vendas.\",\n    agent: \"Assistente de Vendas\",\n    lastUpdated: \"Há 2 dias\",\n    status: \"published\",\n  },\n  {\n    id: \"2\",\n    name: \"Atendimento ao Cliente\",\n    description: \"Fluxo para resolver problemas de clientes.\",\n    agent: \"Suporte ao Cliente\",\n    lastUpdated: \"Há 5 dias\",\n    status: \"published\",\n  },\n  {\n    id: \"3\",\n    name: \"Qualificação de Leads\",\n    description: \"Fluxo para qualificar leads antes de enviar para vendas.\",\n    agent: \"Qualificação de Leads\",\n    lastUpdated: \"Há 1 semana\",\n    status: \"draft\",\n  },\n  {\n    id: \"4\",\n    name: \"FAQ Automatizado\",\n    description: \"Fluxo para responder perguntas frequentes.\",\n    agent: \"FAQ Bot\",\n    lastUpdated: \"Há 2 semanas\",\n    status: \"draft\",\n  },\n]\n\nexport default function AgentStudioPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">AgentStudio</h1>\n          <p className=\"text-muted-foreground\">\n            Crie e gerencie fluxos de conversação para seus agentes.\n          </p>\n        </div>\n        <Link href=\"/agent-studio/new\">\n          <Button>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Novo Fluxo\n          </Button>\n        </Link>\n      </div>\n      <Tabs defaultValue=\"all\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"all\">Todos</TabsTrigger>\n          <TabsTrigger value=\"published\">Publicados</TabsTrigger>\n          <TabsTrigger value=\"draft\">Rascunhos</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {flows.map((flow) => (\n              <Card key={flow.id}>\n                <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <CardTitle className=\"flex items-center\">\n                        <FlowIcon className=\"mr-2 h-4 w-4\" />\n                        {flow.name}\n                      </CardTitle>\n                      {flow.status === \"published\" ? (\n                        <Badge variant=\"default\" className=\"bg-green-500\">Publicado</Badge>\n                      ) : (\n                        <Badge variant=\"outline\">Rascunho</Badge>\n                      )}\n                    </div>\n                    <CardDescription>{flow.description}</CardDescription>\n                  </div>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\">\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                        <span className=\"sr-only\">Abrir menu</span>\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>Ações</DropdownMenuLabel>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem>\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                        Editar\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Copy className=\"mr-2 h-4 w-4\" />\n                        Duplicar\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem className=\"text-destructive\">\n                        <Trash className=\"mr-2 h-4 w-4\" />\n                        Excluir\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Agente</p>\n                      <p className=\"font-medium\">{flow.agent}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Última atualização</p>\n                      <p className=\"font-medium\">{flow.lastUpdated}</p>\n                    </div>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <div className=\"flex w-full justify-between\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      Simular\n                    </Button>\n                    <Link href={`/agent-studio/${flow.id}`}>\n                      <Button size=\"sm\">\n                        Editar Fluxo\n                      </Button>\n                    </Link>\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n        <TabsContent value=\"published\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {flows.filter(f => f.status === \"published\").map((flow) => (\n              <Card key={flow.id}>\n                <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <CardTitle className=\"flex items-center\">\n                        <FlowIcon className=\"mr-2 h-4 w-4\" />\n                        {flow.name}\n                      </CardTitle>\n                      <Badge variant=\"default\" className=\"bg-green-500\">Publicado</Badge>\n                    </div>\n                    <CardDescription>{flow.description}</CardDescription>\n                  </div>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\">\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                        <span className=\"sr-only\">Abrir menu</span>\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>Ações</DropdownMenuLabel>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem>\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                        Editar\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Copy className=\"mr-2 h-4 w-4\" />\n                        Duplicar\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem className=\"text-destructive\">\n                        <Trash className=\"mr-2 h-4 w-4\" />\n                        Excluir\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Agente</p>\n                      <p className=\"font-medium\">{flow.agent}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Última atualização</p>\n                      <p className=\"font-medium\">{flow.lastUpdated}</p>\n                    </div>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <div className=\"flex w-full justify-between\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      Simular\n                    </Button>\n                    <Link href={`/agent-studio/${flow.id}`}>\n                      <Button size=\"sm\">\n                        Editar Fluxo\n                      </Button>\n                    </Link>\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n        <TabsContent value=\"draft\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {flows.filter(f => f.status === \"draft\").map((flow) => (\n              <Card key={flow.id}>\n                <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <CardTitle className=\"flex items-center\">\n                        <FlowIcon className=\"mr-2 h-4 w-4\" />\n                        {flow.name}\n                      </CardTitle>\n                      <Badge variant=\"outline\">Rascunho</Badge>\n                    </div>\n                    <CardDescription>{flow.description}</CardDescription>\n                  </div>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\">\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                        <span className=\"sr-only\">Abrir menu</span>\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>Ações</DropdownMenuLabel>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem>\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                        Editar\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Copy className=\"mr-2 h-4 w-4\" />\n                        Duplicar\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem className=\"text-destructive\">\n                        <Trash className=\"mr-2 h-4 w-4\" />\n                        Excluir\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <p className\\\n","type":"registry:page","target":"app/(dashboard)/agent-studio/page.tsx"},{"path":"tailwind.config.ts","content":"import type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n    \"../../packages/ui/src/**/*.{ts,tsx}\", // Path to shared UI package\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      fontFamily: {\n        sans: [\n          \"var(--font-sans)\",\n          \"-apple-system\",\n          \"BlinkMacSystemFont\",\n          \"Segoe UI\",\n          \"Roboto\",\n          \"Oxygen\",\n          \"Ubuntu\",\n          \"Cantarell\",\n          \"Helvetica Neue\",\n          \"sans-serif\",\n        ],\n        mono: [\n          \"var(--font-mono)\",\n          \"JetBrains Mono\",\n          \"SF Mono\",\n          \"Monaco\",\n          \"Consolas\",\n          \"Liberation Mono\",\n          \"Courier New\",\n          \"monospace\",\n        ],\n      },\n      fontSize: {\n        xs: \"0.75rem\", // 12px\n        sm: \"0.875rem\", // 14px\n        base: \"1rem\", // 16px\n        lg: \"1.125rem\", // 18px\n        xl: \"1.25rem\", // 20px\n        \"2xl\": \"1.5rem\", // 24px\n        \"3xl\": \"1.875rem\", // 30px\n        \"4xl\": \"2.25rem\", // 36px\n        \"5xl\": \"3rem\", // 48px\n        \"6xl\": \"3.75rem\", // 60px\n        \"7xl\": \"4.5rem\", // 72px\n      },\n      lineHeight: {\n        none: \"1\",\n        tight: \"1.25\",\n        snug: \"1.375\",\n        normal: \"1.5\",\n        relaxed: \"1.625\",\n        loose: \"2\",\n      },\n      fontWeight: {\n        normal: \"400\",\n        medium: \"500\",\n        semibold: \"600\",\n        bold: \"700\",\n      },\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n          // From Design System:\n          // --blue-600: #0066FF; (Primary)\n          // --blue-500: #3B82F6; (Primary Dark Mode)\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n          // From Design System:\n          // --red-500: #EF4444; (Destructive Light)\n          // --red-600: #DC2626; (Destructive Dark)\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        // Functional Colors from Design System\n        green: {\n          DEFAULT: \"#10B981\", // --green-500\n          light: \"#34D399\", // --green-400\n          dark: \"#059669\", // --green-600\n        },\n        amber: {\n          DEFAULT: \"#F59E0B\", // --amber-500\n          light: \"#FBBF24\", // --amber-400\n          dark: \"#D97706\", // --amber-600\n        },\n        red: {\n          // Already used for destructive, but can be aliased\n          DEFAULT: \"#EF4444\", // --red-500\n          light: \"#F87171\", // --red-400\n          dark: \"#DC2626\", // --red-600\n        },\n        // Neutrals from Design System\n        gray: {\n          50: \"#F9FAFB\",\n          100: \"#F3F4F6\",\n          200: \"#E5E7EB\",\n          300: \"#D1D5DB\",\n          400: \"#9CA3AF\",\n          500: \"#6B7280\",\n          600: \"#4B5563\",\n          700: \"#374151\",\n          800: \"#1F2937\",\n          900: \"#111827\",\n          950: \"#030712\",\n        },\n        // Specific brand colors\n        \"tech-black\": \"#000000\",\n        \"human-blue\": {\n          DEFAULT: \"#0066FF\", // --blue-600\n          500: \"#3B82F6\",\n          400: \"#60A5FA\",\n          300: \"#93BBFC\",\n        },\n      },\n      borderRadius: {\n        none: \"0\",\n        sm: \"0.125rem\", // 2px\n        DEFAULT: \"0.25rem\", // 4px (base)\n        md: \"0.375rem\", // 6px\n        lg: \"0.5rem\", // 8px\n        xl: \"0.75rem\", // 12px\n        \"2xl\": \"1rem\", // 16px\n        \"3xl\": \"1.5rem\", // 24px\n        full: \"9999px\",\n      },\n      boxShadow: {\n        sm: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n        DEFAULT: \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\",\n        md: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\",\n        lg: \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\",\n        xl: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\",\n        \"2xl\": \"0 25px 50px -12px rgb(0 0 0 / 0.25)\",\n        inner: \"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      transitionDuration: {\n        \"75\": \"75ms\",\n        \"100\": \"100ms\",\n        \"150\": \"150ms\",\n        \"200\": \"200ms\",\n        \"300\": \"300ms\",\n        \"500\": \"500ms\",\n        \"700\": \"700ms\",\n        \"1000\": \"1000ms\",\n      },\n      transitionTimingFunction: {\n        linear: \"linear\",\n        in: \"cubic-bezier(0.4, 0, 1, 1)\",\n        out: \"cubic-bezier(0, 0, 0.2, 1)\",\n        \"in-out\": \"cubic-bezier(0.4, 0, 0.2, 1)\",\n        bounce: \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config\n","type":"registry:block","target":"~/tailwind.config.ts"},{"path":"app/globals.css","content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Font Variables */\n    --font-sans: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\n      \"Helvetica Neue\", sans-serif;\n    --font-mono: \"JetBrains Mono\", \"SF Mono\", Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n\n    /* Light Mode Semantic Colors */\n    --background: 0 0% 100%; /* #FFFFFF */\n    --foreground: 224 71.4% 4.1%; /* #030712 */\n    --card: 0 0% 100%; /* #FFFFFF */\n    --card-foreground: 224 71.4% 4.1%; /* #030712 */\n    --popover: 0 0% 100%; /* #FFFFFF */\n    --popover-foreground: 224 71.4% 4.1%; /* #030712 */\n    --primary: 221 100% 50%; /* #0066FF */\n    --primary-foreground: 0 0% 100%; /* #FFFFFF */\n    --secondary: 220 14.3% 95.9%; /* #F3F4F6 */\n    --secondary-foreground: 222 47.4% 11.2%; /* #111827 */\n    --muted: 220 14.3% 98%; /* #F9FAFB */\n    --muted-foreground: 220 8.9% 46.1%; /* #6B7280 */\n    --accent: 220 14.3% 95.9%; /* #F3F4F6 */\n    --accent-foreground: 222 47.4% 11.2%; /* #111827 */\n    --destructive: 0 84.2% 60.2%; /* #EF4444 */\n    --destructive-foreground: 0 0% 100%; /* #FFFFFF */\n    --border: 220 13% 91%; /* #E5E7EB */\n    --input: 220 13% 91%; /* #E5E7EB */\n    --ring: 221 100% 50%; /* #0066FF */\n    --radius: 0.5rem; /* Default radius, can be overridden */\n\n    /* Functional Colors */\n    --green-500: 158 80% 40%; /* #10B981 */\n    --amber-500: 38 92% 50%; /* #F59E0B */\n    --red-500: 0 84% 60%; /* #EF4444 */\n  }\n\n  .dark {\n    /* Dark Mode Semantic Colors */\n    --background: 224 71.4% 4.1%; /* #030712 */\n    --foreground: 220 14.3% 98%; /* #F9FAFB */\n    --card: 222 47.4% 11.2%; /* #111827 */\n    --card-foreground: 220 14.3% 98%; /* #F9FAFB */\n    --popover: 222 47.4% 11.2%; /* #111827 */\n    --popover-foreground: 220 14.3% 98%; /* #F9FAFB */\n    --primary: 217 91.2% 59.8%; /* #3B82F6 */\n    --primary-foreground: 224 71.4% 4.1%; /* #030712 */\n    --secondary: 222 47.4% 16.9%; /* #1F2937 */\n    --secondary-foreground: 220 14.3% 98%; /* #F9FAFB */\n    --muted: 222 47.4% 16.9%; /* #1F2937 */\n    --muted-foreground: 220 10% 62.9%; /* #9CA3AF */\n    --accent: 222 47.4% 16.9%; /* #1F2937 */\n    --accent-foreground: 220 14.3% 98%; /* #F9FAFB */\n    --destructive: 0 72.2% 50.6%; /* #DC2626 */\n    --destructive-foreground: 220 14.3% 98%; /* #F9FAFB */\n    --border: 222 47.4% 16.9%; /* #1F2937 */\n    --input: 222 47.4% 16.9%; /* #1F2937 */\n    --ring: 217 91.2% 59.8%; /* #3B82F6 */\n\n    /* Functional Colors Dark - can be same or adjusted if needed */\n    --green-500: 158 80% 40%;\n    --amber-500: 38 92% 50%;\n    --red-500: 0 72% 51%; /* Using the darker red for destructive */\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    @apply font-semibold;\n  }\n  h1 {\n    @apply text-4xl;\n  }\n  h2 {\n    @apply text-3xl;\n  }\n  h3 {\n    @apply text-2xl;\n  }\n  h4 {\n    @apply text-xl;\n  }\n  p {\n    @apply leading-relaxed;\n  }\n}\n\n/* Custom ReactFlow styles to match theme */\n.react-flow__node {\n  @apply bg-card text-card-foreground border-border rounded-lg shadow-md;\n}\n.react-flow__node.selected {\n  @apply ring-2 ring-primary ring-offset-2 ring-offset-background;\n}\n.react-flow__handle {\n  @apply !bg-primary;\n}\n.react-flow__edge-path {\n  @apply stroke-primary;\n}\n.react-flow__controls {\n  @apply bg-card border border-border rounded-lg shadow;\n}\n.react-flow__controls button {\n  @apply bg-card hover:bg-accent text-foreground;\n}\n.react-flow__background {\n  @apply bg-muted/20;\n}\n.react-flow__minimap {\n  @apply bg-card border border-border rounded-md;\n}\n","type":"registry:block","target":"~/app/globals.css"},{"path":"components/agent-studio/flow-editor.tsx","content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useCallback, useRef } from \"react\"\nimport {\n  ReactFlow,\n  Controls,\n  Background,\n  applyNodeChanges,\n  applyEdgeChanges,\n  addEdge,\n  useReactFlow,\n  MiniMap,\n  type Node,\n  type Connection,\n  type NodeChange,\n  type EdgeChange,\n} from \"@xyflow/react\"\nimport \"@xyflow/react/dist/style.css\"\n\nimport { nodeTypes } from \"./nodes\"\nimport { useStudioStore } from \"@/stores/studio-store\"\n\nconst initialNodes: Node[] = [\n  {\n    id: \"1\",\n    type: \"startNode\",\n    data: { label: \"Início\" },\n    position: { x: 250, y: 50 },\n  },\n]\n\nexport function FlowEditor() {\n  const reactFlowWrapper = useRef<HTMLDivElement>(null)\n  const { nodes, edges, onNodesChange, onEdgesChange, onConnect, addNode, setSelectedNodeId } = useStudioStore(\n    (state) => ({\n      nodes: state.nodes.length > 0 ? state.nodes : initialNodes, // Use initialNodes if store is empty\n      edges: state.edges,\n      onNodesChange: (changes: NodeChange[]) =>\n        state.setNodes(applyNodeChanges(changes, state.nodes.length > 0 ? state.nodes : initialNodes)),\n      onEdgesChange: (changes: EdgeChange[]) => state.setEdges(applyEdgeChanges(changes, state.edges)),\n      onConnect: (params: Connection) => state.setEdges(addEdge(params, state.edges)),\n      addNode: state.addNode,\n      setSelectedNodeId: state.setSelectedNodeId,\n    }),\n  )\n\n  const { project } = useReactFlow()\n\n  const onDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault()\n    event.dataTransfer.dropEffect = \"move\"\n  }, [])\n\n  const onDrop = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault()\n      if (!reactFlowWrapper.current) return\n\n      const type = event.dataTransfer.getData(\"application/reactflow\")\n      if (typeof type === \"undefined\" || !type) {\n        return\n      }\n\n      const position = project({\n        x: event.clientX - reactFlowWrapper.current.getBoundingClientRect().left,\n        y: event.clientY - reactFlowWrapper.current.getBoundingClientRect().top,\n      })\n\n      const newNode: Node = {\n        id: `node_${+new Date()}`, // Ensure unique ID\n        type,\n        position,\n        data: { label: `${type.replace(\"Node\", \"\")}` }, // Basic label\n      }\n      addNode(newNode)\n    },\n    [project, addNode],\n  )\n\n  const onNodeClick = useCallback(\n    (_: React.MouseEvent, node: Node) => {\n      setSelectedNodeId(node.id)\n    },\n    [setSelectedNodeId],\n  )\n\n  const onPaneClick = useCallback(() => {\n    setSelectedNodeId(null)\n  }, [setSelectedNodeId])\n\n  return (\n    <div className=\"h-full w-full\" ref={reactFlowWrapper}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        onPaneClick={onPaneClick}\n        onDrop={onDrop}\n        onDragOver={onDragOver}\n        nodeTypes={nodeTypes}\n        fitView\n        className=\"bg-background\" // Ensure this class is applied\n      >\n        <Controls className=\"!border-border !bg-card !shadow-lg\" />\n        <MiniMap nodeStrokeWidth={3} zoomable pannable className=\"!border-border !bg-card\" />\n        <Background\n          variant=\"dots\"\n          gap={16}\n          size={1}\n          className=\"!bg-muted/30\" // Adjusted from design doc for better visibility\n        />\n      </ReactFlow>\n    </div>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/start-node.tsx","content":"import type React from \"react\"\nimport type { NodeProps } from \"@xyflow/react\"\nimport { NodeWrapper, type CustomNodeData } from \"./node-wrapper\"\n\nexport const StartNode: React.FC<NodeProps<CustomNodeData>> = (props) => {\n  return (\n    <NodeWrapper {...props} title=\"Início\" iconName=\"Play\" hasInputHandle={false}>\n      <p className=\"text-muted-foreground\">O ponto de partida do seu fluxo.</p>\n    </NodeWrapper>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/webhook-node.tsx","content":"import type React from \"react\"\nimport type { NodeProps } from \"@xyflow/react\"\nimport { NodeWrapper, type CustomNodeData } from \"./node-wrapper\"\nimport { Input } from \"@/components/ui/input\"\n\nexport const WebhookNode: React.FC<NodeProps<CustomNodeData>> = (props) => {\n  return (\n    <NodeWrapper {...props} title=\"Webhook\" iconName=\"Webhook\" hasInputHandle={false}>\n      <Input\n        placeholder=\"URL do Webhook\"\n        defaultValue={props.data.url || \"\"}\n        className=\"text-xs\"\n        readOnly // Configuration should be in properties panel\n      />\n      <p className=\"mt-1 text-muted-foreground text-xs\">Recebe dados de um webhook.</p>\n    </NodeWrapper>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/end-node.tsx","content":"import type React from \"react\"\nimport type { NodeProps } from \"@xyflow/react\"\nimport { NodeWrapper, type CustomNodeData } from \"./node-wrapper\"\n\nexport const EndNode: React.FC<NodeProps<CustomNodeData>> = (props) => {\n  return (\n    <NodeWrapper {...props} title=\"Fim\" iconName=\"CheckCircle\" hasOutputHandle={false}>\n      <p className=\"text-muted-foreground\">O ponto final do seu fluxo.</p>\n    </NodeWrapper>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/studio-sidebar.tsx","content":"\"use client\"\n\nimport React from \"react\"\n\nimport { Input } from \"@/components/ui/input\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { nodeCategories } from \"./nodes\"\nimport * as Icons from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Separator } from \"@/components/ui/separator\"\n\nexport function StudioSidebar() {\n  const onDragStart = (event: React.DragEvent, nodeType: string) => {\n    event.dataTransfer.setData(\"application/reactflow\", nodeType)\n    event.dataTransfer.effectAllowed = \"move\"\n  }\n\n  return (\n    <aside className=\"w-64 border-r bg-card flex flex-col\">\n      <div className=\"p-3 border-b\">\n        <Input\n          placeholder=\"Buscar componentes...\"\n          className=\"pl-8 h-9 text-xs\"\n          icon={\n            <Icons.Search className=\"absolute left-2.5 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-muted-foreground\" />\n          }\n        />\n      </div>\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-3 space-y-3\">\n          {nodeCategories.map((category, catIndex) => (\n            <div key={category.label}>\n              <div className=\"flex items-center space-x-2 mb-2 px-1\">\n                {category.icon &&\n                  React.createElement(Icons[category.icon as keyof typeof Icons], {\n                    className: \"h-4 w-4 text-muted-foreground\",\n                  })}\n                <h3 className=\"font-medium text-xs text-muted-foreground uppercase tracking-wider\">{category.label}</h3>\n              </div>\n              <div className=\"space-y-1.5\">\n                {category.nodes.map((node) => {\n                  const IconComponent = node.icon ? Icons[node.icon as keyof typeof Icons] : Icons.BoxSelect\n                  return (\n                    <div\n                      key={node.type}\n                      className={cn(\n                        \"flex items-center gap-2 p-2 rounded-md border bg-background cursor-grab hover:bg-accent hover:shadow-md transition-all duration-150 ease-in-out active:cursor-grabbing active:shadow-lg\",\n                      )}\n                      draggable\n                      onDragStart={(e) => onDragStart(e, node.type)}\n                    >\n                      <IconComponent className=\"h-4 w-4 text-primary\" />\n                      <span className=\"text-xs font-medium\">{node.label}</span>\n                    </div>\n                  )\n                })}\n              </div>\n              {catIndex < nodeCategories.length - 1 && <Separator className=\"my-3\" />}\n            </div>\n          ))}\n        </div>\n      </ScrollArea>\n    </aside>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/node-wrapper.tsx","content":"import type React from \"react\"\nimport { Handle, Position, type NodeProps } from \"@xyflow/react\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { cn } from \"@/lib/utils\"\nimport * as Icons from \"lucide-react\"\n\nexport interface CustomNodeData {\n  label: string\n  icon?: keyof typeof Icons\n  description?: string\n  status?: \"default\" | \"running\" | \"error\" | \"completed\"\n  color?: string // For \"Voice Signature\" like accents\n  [key: string]: any\n}\n\ninterface NodeWrapperProps extends NodeProps<CustomNodeData> {\n  title: string\n  iconName?: keyof typeof Icons\n  children?: React.ReactNode\n  hasInputHandle?: boolean\n  hasOutputHandle?: boolean\n  inputHandleId?: string\n  outputHandleId?: string\n  footerContent?: React.ReactNode\n}\n\nexport const NodeWrapper: React.FC<NodeWrapperProps> = ({\n  data,\n  selected,\n  title,\n  iconName,\n  children,\n  hasInputHandle = true,\n  hasOutputHandle = true,\n  inputHandleId = \"a\",\n  outputHandleId = \"b\",\n  footerContent,\n}) => {\n  const IconComponent = iconName ? Icons[iconName] : null\n  const statusColor =\n    data.status === \"running\"\n      ? \"border-blue-500\"\n      : data.status === \"error\"\n        ? \"border-red-500\"\n        : data.status === \"completed\"\n          ? \"border-green-500\"\n          : \"border-border\"\n\n  const accentStyle = data.color ? { borderLeftColor: data.color, borderLeftWidth: \"4px\" } : {}\n\n  return (\n    <Card\n      className={cn(\n        \"min-w-[220px] max-w-[320px] shadow-lg transition-all duration-150 ease-in-out rounded-lg overflow-hidden\",\n        statusColor,\n        selected && \"ring-2 ring-primary ring-offset-2 ring-offset-background shadow-2xl\",\n      )}\n      style={accentStyle}\n    >\n      {hasInputHandle && (\n        <Handle\n          type=\"target\"\n          position={Position.Left}\n          id={inputHandleId}\n          className=\"!h-full !w-3 !rounded-none !border-none !bg-transparent hover:!bg-primary/20 transition-colors\"\n          style={{ left: \"-6px\" }}\n        />\n      )}\n      <CardHeader className=\"flex flex-row items-center space-x-2 p-3 bg-muted/30\">\n        {IconComponent && (\n          <IconComponent className={cn(\"h-5 w-5\", data.color ? `text-[${data.color}]` : \"text-primary\")} />\n        )}\n        <div className=\"flex-1\">\n          <CardTitle className=\"text-sm font-semibold\">{data.label || title}</CardTitle>\n          {data.description && <CardDescription className=\"text-xs\">{data.description}</CardDescription>}\n        </div>\n      </CardHeader>\n      {children && <CardContent className=\"p-3 text-xs\">{children}</CardContent>}\n      {footerContent && <CardFooter className=\"p-3 text-xs bg-muted/20\">{footerContent}</CardFooter>}\n      {hasOutputHandle && (\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id={outputHandleId}\n          className=\"!h-full !w-3 !rounded-none !border-none !bg-transparent hover:!bg-primary/20 transition-colors\"\n          style={{ right: \"-6px\" }}\n        />\n      )}\n    </Card>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/ai-response-node.tsx","content":"\"use client\"\n\nimport type React from \"react\"\nimport type { NodeProps } from \"@xyflow/react\"\nimport { NodeWrapper, type CustomNodeData } from \"./node-wrapper\"\nimport { Badge } from \"@/components/ui/badge\"\n\n// Example specific data for AIResponseNode\nexport interface AIResponseNodeData extends CustomNodeData {\n  prompt?: string\n  model?: string\n  temperature?: number\n  maxTokens?: number\n}\n\nexport const AIResponseNode: React.FC<NodeProps<AIResponseNodeData>> = (props) => {\n  const { data } = props\n  return (\n    <NodeWrapper\n      {...props}\n      title=\"Resposta IA\"\n      iconName=\"Brain\"\n      data={{ ...data, color: data.color || \"#8B5CF6\" }} // Purple accent for AI\n    >\n      <div className=\"space-y-2\">\n        <p className=\"text-muted-foreground line-clamp-2\">{data.prompt || \"Prompt não configurado.\"}</p>\n        <div className=\"flex flex-wrap gap-1\">\n          {data.model && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Modelo: {data.model}\n            </Badge>\n          )}\n          {data.temperature !== undefined && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Temp: {data.temperature}\n            </Badge>\n          )}\n          {data.maxTokens !== undefined && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Tokens: {data.maxTokens}\n            </Badge>\n          )}\n        </div>\n      </div>\n    </NodeWrapper>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/condition-node.tsx","content":"import type React from \"react\"\nimport { Handle, Position, type NodeProps } from \"@xyflow/react\"\nimport { NodeWrapper, type CustomNodeData } from \"./node-wrapper\"\n\nexport interface ConditionNodeData extends CustomNodeData {\n  condition?: string\n}\n\nexport const ConditionNode: React.FC<NodeProps<ConditionNodeData>> = (props) => {\n  const { data } = props\n  return (\n    <NodeWrapper\n      {...props}\n      title=\"Condição\"\n      iconName=\"GitFork\"\n      hasOutputHandle={false}\n      data={{ ...data, color: data.color || \"#F59E0B\" }} // Amber accent for Logic\n    >\n      <p className=\"text-muted-foreground line-clamp-2\">{data.condition || \"Condição não configurada.\"}</p>\n      <div className=\"mt-2 flex flex-col space-y-1.5\">\n        <div className=\"relative flex items-center justify-end group\">\n          <span className=\"mr-2 text-xs text-muted-foreground group-hover:text-green-600\">Verdadeiro</span>\n          <Handle\n            type=\"source\"\n            position={Position.Right}\n            id=\"true\"\n            className=\"!relative !transform-none !right-0 !top-0 !h-full !w-3 !rounded-none !border-none !bg-transparent hover:!bg-green-500/20 transition-colors\"\n            style={{ right: \"-6px\" }}\n          />\n        </div>\n        <div className=\"relative flex items-center justify-end group\">\n          <span className=\"mr-2 text-xs text-muted-foreground group-hover:text-red-600\">Falso</span>\n          <Handle\n            type=\"source\"\n            position={Position.Right}\n            id=\"false\"\n            className=\"!relative !transform-none !right-0 !top-0 !h-full !w-3 !rounded-none !border-none !bg-transparent hover:!bg-red-500/20 transition-colors\"\n            style={{ right: \"-6px\" }}\n          />\n        </div>\n      </div>\n    </NodeWrapper>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/message-node.tsx","content":"import type React from \"react\"\nimport type { NodeProps } from \"@xyflow/react\"\nimport { NodeWrapper, type CustomNodeData } from \"./node-wrapper\"\n\nexport interface MessageNodeData extends CustomNodeData {\n  message?: string\n  channel?: string\n}\n\nexport const MessageNode: React.FC<NodeProps<MessageNodeData>> = (props) => {\n  const { data } = props\n  return (\n    <NodeWrapper\n      {...props}\n      title=\"Enviar Mensagem\"\n      iconName=\"MessageSquare\"\n      data={{ ...data, color: data.color || \"#0EA5E9\" }} // Sky accent for Communication\n    >\n      <p className=\"text-muted-foreground line-clamp-3\">{data.message || \"Mensagem não configurada.\"}</p>\n      {data.channel && <p className=\"mt-1 text-xs text-blue-500\">Canal: {data.channel}</p>}\n    </NodeWrapper>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/nodes/index.ts","content":"import type { NodeTypes } from \"@xyflow/react\"\nimport { StartNode } from \"./start-node\"\nimport { AIResponseNode } from \"./ai-response-node\"\nimport { ConditionNode } from \"./condition-node\"\nimport { WebhookNode } from \"./webhook-node\"\nimport { EndNode } from \"./end-node\"\nimport { MessageNode } from \"./message-node\"\nimport { ToolNode } from \"./tool-node\" // Novo nó\n\nexport const nodeTypes: NodeTypes = {\n  startNode: StartNode,\n  aiResponseNode: AIResponseNode,\n  conditionNode: ConditionNode,\n  webhookNode: WebhookNode,\n  messageNode: MessageNode,\n  toolNode: ToolNode, // Adicionado\n  endNode: EndNode,\n}\n\nexport const nodeCategories = [\n  {\n    label: \"Gatilhos\", // Renomeado de \"Entrada\"\n    icon: \"Zap\",\n    nodes: [\n      { type: \"startNode\", label: \"Início do Fluxo\", icon: \"PlayCircle\" }, // Ícone mais específico\n      { type: \"webhookNode\", label: \"Webhook HTTP\", icon: \"Webhook\" },\n    ],\n  },\n  {\n    label: \"Ações de IA\", // Renomeado e focado\n    icon: \"BrainCircuit\", // Ícone mais específico\n    nodes: [\n      { type: \"aiResponseNode\", label: \"Gerar Resposta IA\", icon: \"Sparkles\" }, // Ícone mais específico\n    ],\n  },\n  {\n    label: \"Lógica\",\n    icon: \"GitFork\",\n    nodes: [\n      { type: \"conditionNode\", label: \"Decisão (Se/Então)\", icon: \"Split\" }, // Ícone mais específico\n    ],\n  },\n  {\n    label: \"Comunicação\",\n    icon: \"MessagesSquare\", // Ícone mais específico\n    nodes: [\n      { type: \"messageNode\", label: \"Enviar Mensagem\", icon: \"Send\" }, // Ícone mais específico\n    ],\n  },\n  {\n    label: \"Ferramentas\", // Nova categoria\n    icon: \"Wrench\",\n    nodes: [\n      { type: \"toolNode\", label: \"Executar Ferramenta\", icon: \"TerminalSquare\" }, // Novo nó\n    ],\n  },\n  {\n    label: \"Finalizadores\", // Renomeado de \"Saída\"\n    icon: \"Flag\",\n    nodes: [{ type: \"endNode\", label: \"Fim do Fluxo\", icon: \"CheckCircle2\" }], // Ícone mais específico\n  },\n]\n","type":"registry:component"},{"path":"components/agent-studio/nodes/tool-node.tsx","content":"import type React from \"react\"\nimport type { NodeProps } from \"@xyflow/react\"\nimport { NodeWrapper, type CustomNodeData } from \"./node-wrapper\"\nimport { Badge } from \"@/components/ui/badge\"\n\nexport interface ToolNodeData extends CustomNodeData {\n  toolName?: string\n  inputParams?: Record<string, any>\n}\n\nexport const ToolNode: React.FC<NodeProps<ToolNodeData>> = (props) => {\n  const { data } = props\n  return (\n    <NodeWrapper\n      {...props}\n      title=\"Executar Ferramenta\"\n      iconName=\"TerminalSquare\"\n      data={{ ...data, color: data.color || \"#10B981\" }} // Green accent for Tools\n    >\n      <div className=\"space-y-1\">\n        <p className=\"font-medium text-foreground\">{data.toolName || \"Ferramenta não selecionada\"}</p>\n        {data.inputParams && Object.keys(data.inputParams).length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {Object.entries(data.inputParams).map(([key, value]) => (\n              <Badge key={key} variant=\"secondary\" className=\"text-xs\">\n                {key}: {String(value).substring(0, 20)}\n                {String(value).length > 20 ? \"...\" : \"\"}\n              </Badge>\n            ))}\n          </div>\n        )}\n        {!data.inputParams ||\n          (Object.keys(data.inputParams).length === 0 && (\n            <p className=\"text-xs text-muted-foreground\">Nenhum parâmetro de entrada configurado.</p>\n          ))}\n      </div>\n    </NodeWrapper>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/properties-panel.tsx","content":"\"use client\"\nimport type { Node } from \"@xyflow/react\"\nimport { CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Label } from \"@/components/ui/label\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Button } from \"@/components/ui/button\"\nimport { useStudioStore } from \"@/stores/studio-store\"\nimport { Delete, Palette, Trash2 } from \"lucide-react\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { cn } from \"@/lib/utils\"\n\ninterface PropertiesPanelProps {\n  node: Node\n}\n\nconst availableColors = [\n  { name: \"Padrão\", value: undefined },\n  { name: \"Azul\", value: \"#3B82F6\" },\n  { name: \"Verde\", value: \"#10B981\" },\n  { name: \"Amarelo\", value: \"#F59E0B\" },\n  { name: \"Roxo\", value: \"#8B5CF6\" },\n  { name: \"Rosa\", value: \"#EC4899\" },\n  { name: \"Ciano\", value: \"#06B6D4\" },\n]\n\nexport function PropertiesPanel({ node }: PropertiesPanelProps) {\n  const { updateNodeData, deleteNode } = useStudioStore((state) => ({\n    updateNodeData: state.updateNodeData,\n    deleteNode: state.deleteNode,\n  }))\n\n  const handleInputChange = (field: string, value: string | number | boolean | undefined) => {\n    updateNodeData(node.id, { ...node.data, [field]: value })\n  }\n\n  const handleJsonInputChange = (field: string, value: string) => {\n    try {\n      const parsedValue = JSON.parse(value)\n      updateNodeData(node.id, { ...node.data, [field]: parsedValue })\n    } catch (error) {\n      // Handle JSON parsing error, e.g., show a toast or an inline error message\n      console.error(\"Invalid JSON input for field:\", field, error)\n      // Optionally, update with raw string if parsing fails and you want to allow partial input\n      // updateNodeData(node.id, { ...node.data, [`${field}_raw`]: value });\n    }\n  }\n\n  const renderNodeSpecificFields = () => {\n    switch (node.type) {\n      case \"aiResponseNode\":\n        return (\n          <>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`prompt-${node.id}`} className=\"text-xs\">\n                Prompt\n              </Label>\n              <Textarea\n                id={`prompt-${node.id}`}\n                placeholder=\"Prompt para a IA\"\n                value={node.data.prompt || \"\"}\n                onChange={(e) => handleInputChange(\"prompt\", e.target.value)}\n                className=\"min-h-[100px] text-xs\"\n              />\n            </div>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`model-${node.id}`} className=\"text-xs\">\n                Modelo de IA\n              </Label>\n              <Input\n                id={`model-${node.id}`}\n                placeholder=\"ex: gpt-4o\"\n                value={node.data.model || \"\"}\n                onChange={(e) => handleInputChange(\"model\", e.target.value)}\n                className=\"text-xs h-9\"\n              />\n            </div>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`temperature-${node.id}`} className=\"text-xs\">\n                Temperatura ({node.data.temperature || 0.7})\n              </Label>\n              <Slider\n                id={`temperature-${node.id}`}\n                min={0}\n                max={1}\n                step={0.1}\n                defaultValue={[node.data.temperature || 0.7]}\n                onValueChange={(value) => handleInputChange(\"temperature\", value[0])}\n              />\n            </div>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`maxTokens-${node.id}`} className=\"text-xs\">\n                Max Tokens\n              </Label>\n              <Input\n                id={`maxTokens-${node.id}`}\n                type=\"number\"\n                placeholder=\"ex: 512\"\n                value={node.data.maxTokens || \"\"}\n                onChange={(e) => handleInputChange(\"maxTokens\", Number.parseInt(e.target.value, 10))}\n                className=\"text-xs h-9\"\n              />\n            </div>\n          </>\n        )\n      case \"conditionNode\":\n        return (\n          <div className=\"space-y-1.5\">\n            <Label htmlFor={`condition-${node.id}`} className=\"text-xs\">\n              Condição (JavaScript)\n            </Label>\n            <Textarea\n              id={`condition-${node.id}`}\n              placeholder=\"Ex: {{variavel}} === 'valor' && {{outra_variavel}} > 10\"\n              value={node.data.condition || \"\"}\n              onChange={(e) => handleInputChange(\"condition\", e.target.value)}\n              className=\"min-h-[60px] text-xs font-mono\"\n            />\n            <p className=\"text-xs text-muted-foreground\">Use {\"{{variavel}}\"} para acessar dados.</p>\n          </div>\n        )\n      case \"webhookNode\":\n        return (\n          <div className=\"space-y-1.5\">\n            <Label htmlFor={`url-${node.id}`} className=\"text-xs\">\n              URL do Webhook\n            </Label>\n            <Input\n              id={`url-${node.id}`}\n              placeholder=\"https://seu.webhook/url\"\n              value={node.data.url || \"\"}\n              onChange={(e) => handleInputChange(\"url\", e.target.value)}\n              className=\"text-xs h-9\"\n            />\n            <p className=\"text-xs text-muted-foreground\">Este nó será acionado quando esta URL receber um POST.</p>\n          </div>\n        )\n      case \"messageNode\":\n        return (\n          <>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`message-${node.id}`} className=\"text-xs\">\n                Conteúdo da Mensagem\n              </Label>\n              <Textarea\n                id={`message-${node.id}`}\n                placeholder=\"Use {{variavel}} para inserir dados dinâmicos.\"\n                value={node.data.message || \"\"}\n                onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                className=\"min-h-[100px] text-xs\"\n              />\n            </div>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`channel-${node.id}`} className=\"text-xs\">\n                Canal (Opcional)\n              </Label>\n              <Input\n                id={`channel-${node.id}`}\n                placeholder=\"ex: whatsapp, telegram\"\n                value={node.data.channel || \"\"}\n                onChange={(e) => handleInputChange(\"channel\", e.target.value)}\n                className=\"text-xs h-9\"\n              />\n            </div>\n          </>\n        )\n      case \"toolNode\":\n        return (\n          <>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`toolName-${node.id}`} className=\"text-xs\">\n                Nome da Ferramenta\n              </Label>\n              <Input\n                id={`toolName-${node.id}`}\n                placeholder=\"ex: buscar_cliente_crm\"\n                value={node.data.toolName || \"\"}\n                onChange={(e) => handleInputChange(\"toolName\", e.target.value)}\n                className=\"text-xs h-9\"\n              />\n            </div>\n            <div className=\"space-y-1.5\">\n              <Label htmlFor={`inputParams-${node.id}`} className=\"text-xs\">\n                Parâmetros de Entrada (JSON)\n              </Label>\n              <Textarea\n                id={`inputParams-${node.id}`}\n                placeholder={'{\\n  \"customerId\": \"{{user_id}}\",\\n  \"query\": \"status do pedido\"\\n}'}\n                value={node.data.inputParams ? JSON.stringify(node.data.inputParams, null, 2) : \"\"}\n                onChange={(e) => handleJsonInputChange(\"inputParams\", e.target.value)}\n                className=\"min-h-[100px] text-xs font-mono\"\n              />\n            </div>\n          </>\n        )\n      default:\n        return <p className=\"text-xs text-muted-foreground\">Nenhuma propriedade específica para este nó.</p>\n    }\n  }\n\n  return (\n    <aside className=\"w-80 border-l bg-card flex flex-col shadow-xl z-10\">\n      <CardHeader className=\"border-b p-3\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <CardTitle className=\"text-sm\">Propriedades</CardTitle>\n            <CardDescription className=\"text-xs\">{node.data.label || node.type || \"Nó Selecionado\"}</CardDescription>\n          </div>\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n                <Palette className=\"h-4 w-4\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-auto p-2\">\n              <div className=\"grid grid-cols-4 gap-1\">\n                {availableColors.map((color) => (\n                  <Button\n                    key={color.name}\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className={cn(\"h-7 w-7 rounded-full\", node.data.color === color.value && \"ring-2 ring-ring\")}\n                    style={{ backgroundColor: color.value || undefined }}\n                    onClick={() => handleInputChange(\"color\", color.value)}\n                    title={color.name}\n                  >\n                    {!color.value && <Delete className=\"h-3 w-3\" />}\n                  </Button>\n                ))}\n              </div>\n            </PopoverContent>\n          </Popover>\n        </div>\n      </CardHeader>\n      <ScrollArea className=\"flex-1\">\n        <CardContent className=\"p-3 space-y-4\">\n          <div className=\"space-y-1.5\">\n            <Label htmlFor={`label-${node.id}`} className=\"text-xs\">\n              Rótulo do Nó\n            </Label>\n            <Input\n              id={`label-${node.id}`}\n              value={node.data.label || \"\"}\n              onChange={(e) => handleInputChange(\"label\", e.target.value)}\n              className=\"text-xs h-9\"\n            />\n          </div>\n          <div className=\"space-y-1.5\">\n            <Label htmlFor={`description-${node.id}`} className=\"text-xs\">\n              Descrição (Opcional)\n            </Label>\n            <Textarea\n              id={`description-${node.id}`}\n              placeholder=\"Uma breve descrição da função deste nó.\"\n              value={node.data.description || \"\"}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              className=\"min-h-[60px] text-xs\"\n            />\n          </div>\n          {renderNodeSpecificFields()}\n        </CardContent>\n      </ScrollArea>\n      <CardFooter className=\"p-3 border-t\">\n        <Button variant=\"destructive\" size=\"sm\" className=\"w-full text-xs\" onClick={() => deleteNode(node.id)}>\n          <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n          Excluir Nó\n        </Button>\n      </CardFooter>\n    </aside>\n  )\n}\n","type":"registry:component"},{"path":"components/agent-studio/studio-toolbar.tsx","content":"\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useStudioStore } from \"@/stores/studio-store\"\nimport { Play, Undo, Redo, Settings, History, UploadCloud, DownloadCloud } from \"lucide-react\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\ninterface StudioToolbarProps {\n  agentId: string\n  flowName?: string // Optional: display flow name\n}\n\nexport function StudioToolbar({ agentId, flowName = \"Fluxo Principal\" }: StudioToolbarProps) {\n  const { undo, redo, nodes, edges, takeSnapshot } = useStudioStore((state) => ({\n    undo: state.undo,\n    redo: state.redo,\n    nodes: state.nodes,\n    edges: state.edges,\n    takeSnapshot: state.takeSnapshot, // Ensure takeSnapshot is used for explicit save\n  }))\n\n  const handleSave = () => {\n    takeSnapshot() // Explicitly save current state to history before \"API call\"\n    console.log(\"Saving flow for agent:\", agentId, { nodes, edges })\n    toast({\n      title: \"Fluxo Salvo!\",\n      description: \"Suas alterações foram salvas com sucesso.\",\n      variant: \"default\",\n    })\n  }\n\n  const handlePublish = () => {\n    console.log(\"Publishing flow for agent:\", agentId)\n    toast({\n      title: \"Fluxo Publicado!\",\n      description: \"Seu fluxo está ativo e pronto para receber interações.\",\n      variant: \"default\",\n      className: \"bg-green-500 text-white\",\n    })\n  }\n\n  const handleSimulate = () => {\n    console.log(\"Simulating flow for agent:\", agentId)\n    toast({\n      title: \"Simulação Iniciada\",\n      description: \"O modo de simulação está ativo.\",\n    })\n  }\n\n  return (\n    <div className=\"flex h-14 items-center justify-between border-b bg-card px-3 md:px-4\">\n      <div className=\"flex items-center gap-1 md:gap-2\">\n        <Button variant=\"ghost\" size=\"sm\" onClick={undo} className=\"text-xs px-2\" title=\"Desfazer (Ctrl+Z)\">\n          <Undo className=\"mr-0 md:mr-1.5 h-3.5 w-3.5\" /> <span className=\"hidden md:inline\">Desfazer</span>\n        </Button>\n        <Button variant=\"ghost\" size=\"sm\" onClick={redo} className=\"text-xs px-2\" title=\"Refazer (Ctrl+Y)\">\n          <Redo className=\"mr-0 md:mr-1.5 h-3.5 w-3.5\" /> <span className=\"hidden md:inline\">Refazer</span>\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-xs px-2\">\n              <History className=\"mr-0 md:mr-1.5 h-3.5 w-3.5\" /> <span className=\"hidden md:inline\">Versões</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\">\n            <DropdownMenuLabel className=\"text-xs\">Histórico de Versões</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-xs\">Versão 3 (Atual)</DropdownMenuItem>\n            <DropdownMenuItem className=\"text-xs\">Versão 2 (Há 2 horas)</DropdownMenuItem>\n            <DropdownMenuItem className=\"text-xs\">Versão 1 (Ontem)</DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-xs\">Ver todas as versões...</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <div className=\"hidden md:flex items-center gap-2 text-center\">\n        <span className=\"text-sm font-medium truncate max-w-[200px] lg:max-w-[300px]\" title={flowName}>\n          {flowName}\n        </span>\n      </div>\n\n      <div className=\"flex items-center gap-1 md:gap-2\">\n        <Button variant=\"outline\" size=\"sm\" onClick={handleSimulate} className=\"text-xs px-2\">\n          <Play className=\"mr-0 md:mr-1.5 h-3.5 w-3.5\" /> <span className=\"hidden md:inline\">Simular</span>\n        </Button>\n        <Button\n          size=\"sm\"\n          onClick={handleSave}\n          className=\"text-xs px-2 bg-secondary hover:bg-secondary/80 text-secondary-foreground\"\n        >\n          <DownloadCloud className=\"mr-0 md:mr-1.5 h-3.5 w-3.5\" />{\" \"}\n          <span className=\"hidden md:inline\">Salvar Rascunho</span>\n        </Button>\n        <Button size=\"sm\" onClick={handlePublish} className=\"text-xs px-2\">\n          <UploadCloud className=\"mr-0 md:mr-1.5 h-3.5 w-3.5\" /> <span className=\"hidden md:inline\">Publicar</span>\n        </Button>\n        <Separator orientation=\"vertical\" className=\"h-6 mx-1 hidden md:block\" />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n              <Settings className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Configurações do Fluxo</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel className=\"text-xs\">Configurações</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-xs\">Geral</DropdownMenuItem>\n            <DropdownMenuItem className=\"text-xs\">Variáveis de Ambiente</DropdownMenuItem>\n            <DropdownMenuItem className=\"text-xs\">Integrações</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n        {/* <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n        <Share2 className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Compartilhar</span>\n      </Button> */}\n      </div>\n    </div>\n  )\n}\n","type":"registry:component"},{"path":"app/(dashboard)/agent-studio/[agentId]/flow/page.tsx","content":"\"use client\"\n\nimport { ReactFlowProvider } from \"@xyflow/react\"\nimport { FlowEditor } from \"@/components/agent-studio/flow-editor\"\nimport { StudioSidebar } from \"@/components/agent-studio/studio-sidebar\"\nimport { PropertiesPanel } from \"@/components/agent-studio/properties-panel\"\nimport { StudioToolbar } from \"@/components/agent-studio/studio-toolbar\"\nimport { useStudioStore } from \"@/stores/studio-store\"\nimport { useEffect } from \"react\"\n\nexport default function AgentStudioFlowPage({ params }: { params: { agentId: string } }) {\n  const { selectedNodeId, nodes, loadInitialFlow } = useStudioStore((state) => ({\n    selectedNodeId: state.selectedNodeId,\n    nodes: state.nodes,\n    loadInitialFlow: state.loadInitialFlow, // Assuming you add this to your store\n  }))\n\n  const selectedNode = nodes.find((n) => n.id === selectedNodeId)\n\n  // Placeholder: Load flow data when component mounts or agentId changes\n  // In a real app, you'd fetch this from your backend\n  useEffect(() => {\n    console.log(`Carregando fluxo para o agente: ${params.agentId}`)\n    // Example: loadInitialFlow(fetchedNodes, fetchedEdges);\n    // For now, the store initializes with an empty flow or initialNodes from FlowEditor\n  }, [params.agentId])\n\n  return (\n    // Ensure ReactFlowProvider wraps only components that need its context\n    // and not the entire page if toolbar/sidebar don't directly use useReactFlow() hooks.\n    // However, if they might in the future (e.g. toolbar actions interacting with viewport),\n    // keeping it at this level is fine.\n    <ReactFlowProvider>\n      <div className=\"flex h-[calc(100vh-var(--header-height,4rem))] w-full flex-col bg-muted/20\">\n        <StudioToolbar agentId={params.agentId} flowName={`Fluxo do Agente ${params.agentId.substring(0, 6)}...`} />\n        <div className=\"flex flex-1 overflow-hidden\">\n          <StudioSidebar />\n          <div className=\"flex-1 relative h-full\">\n            <FlowEditor />\n          </div>\n          {selectedNode && <PropertiesPanel node={selectedNode} />}\n        </div>\n      </div>\n    </ReactFlowProvider>\n  )\n}\n","type":"registry:page","target":"app/(dashboard)/agent-studio/[agentId]/flow/page.tsx"},{"path":"stores/studio-store.ts","content":"import { create } from \"zustand\"\nimport { immer } from \"zustand/middleware/immer\"\nimport type { Node, Edge, Viewport } from \"@xyflow/react\"\nimport { nanoid } from \"nanoid\"\n\nexport interface RFState {\n  nodes: Node[]\n  edges: Edge[]\n  viewport: Viewport | undefined\n  selectedNodeId: string | null\n\n  setNodes: (nodes: Node[]) => void\n  setEdges: (edges: Edge[]) => void\n  addNode: (node: Omit<Node, \"id\" | \"position\"> & { id?: string; position?: { x: number; y: number } }) => void // Allow position to be optional for programmatic add\n  updateNodeData: (nodeId: string, data: any) => void\n  deleteNode: (nodeId: string) => void\n  setSelectedNodeId: (nodeId: string | null) => void\n\n  // New: For loading an entire flow\n  loadInitialFlow: (nodes: Node[], edges: Edge[]) => void\n\n  history: Array<{ nodes: Node[]; edges: Edge[] }>\n  historyIndex: number\n  undo: () => void\n  redo: () => void\n  takeSnapshot: () => void\n}\n\nconst MAX_HISTORY_LENGTH = 50\n\nexport const useStudioStore = create<RFState>()(\n  immer((set, get) => ({\n    nodes: [],\n    edges: [],\n    viewport: undefined,\n    selectedNodeId: null,\n\n    setNodes: (nodes) => {\n      set((state) => {\n        state.nodes = nodes\n      })\n      // Avoid snapshot on direct setNodes if it's part of undo/redo or initial load\n    },\n    setEdges: (edges) => {\n      set((state) => {\n        state.edges = edges\n      })\n      // Avoid snapshot on direct setEdges\n    },\n    addNode: (node) => {\n      const newNode = {\n        ...node,\n        id: node.id || nanoid(),\n        // Default position if not provided, though onDrop usually provides it\n        position: node.position || { x: Math.random() * 400, y: Math.random() * 400 },\n      }\n      set((state) => {\n        state.nodes.push(newNode)\n      })\n      get().takeSnapshot()\n    },\n    updateNodeData: (nodeId, data) => {\n      let changed = false\n      set((state) => {\n        const nodeIndex = state.nodes.findIndex((n) => n.id === nodeId)\n        if (nodeIndex !== -1) {\n          // Check if data actually changed to avoid unnecessary snapshots\n          if (\n            JSON.stringify(state.nodes[nodeIndex].data) !== JSON.stringify({ ...state.nodes[nodeIndex].data, ...data })\n          ) {\n            state.nodes[nodeIndex].data = { ...state.nodes[nodeIndex].data, ...data }\n            changed = true\n          }\n        }\n      })\n      if (changed) {\n        get().takeSnapshot()\n      }\n    },\n    deleteNode: (nodeId) => {\n      set((state) => {\n        state.nodes = state.nodes.filter((n) => n.id !== nodeId)\n        state.edges = state.edges.filter((e) => e.source !== nodeId && e.target !== nodeId)\n        if (state.selectedNodeId === nodeId) {\n          state.selectedNodeId = null\n        }\n      })\n      get().takeSnapshot()\n    },\n    setSelectedNodeId: (nodeId) => {\n      set((state) => {\n        state.selectedNodeId = nodeId\n      })\n    },\n\n    loadInitialFlow: (initialNodes, initialEdges) => {\n      set((state) => {\n        state.nodes = initialNodes\n        state.edges = initialEdges\n        state.selectedNodeId = null\n        // Reset history for the new flow\n        state.history = [{ nodes: [...initialNodes], edges: [...initialEdges] }]\n        state.historyIndex = 0\n      })\n    },\n\n    history: [],\n    historyIndex: -1,\n    takeSnapshot: () => {\n      set((state) => {\n        // Avoid snapshot if current state is same as last in history\n        if (state.historyIndex >= 0) {\n          const lastSnapshot = state.history[state.historyIndex]\n          if (\n            JSON.stringify(lastSnapshot.nodes) === JSON.stringify(state.nodes) &&\n            JSON.stringify(lastSnapshot.edges) === JSON.stringify(state.edges)\n          ) {\n            return\n          }\n        }\n\n        const currentSnapshot = { nodes: [...state.nodes], edges: [...state.edges] }\n        const newHistory = state.history.slice(0, state.historyIndex + 1)\n        newHistory.push(currentSnapshot)\n\n        if (newHistory.length > MAX_HISTORY_LENGTH) {\n          state.history = newHistory.slice(newHistory.length - MAX_HISTORY_LENGTH)\n        } else {\n          state.history = newHistory\n        }\n        state.historyIndex = state.history.length - 1\n      })\n    },\n    undo: () => {\n      set((state) => {\n        if (state.historyIndex > 0) {\n          state.historyIndex--\n          const snapshot = state.history[state.historyIndex]\n          state.nodes = [...snapshot.nodes]\n          state.edges = [...snapshot.edges]\n          state.selectedNodeId = null\n        }\n      })\n    },\n    redo: () => {\n      set((state) => {\n        if (state.historyIndex < state.history.length - 1) {\n          state.historyIndex++\n          const snapshot = state.history[state.historyIndex]\n          state.nodes = [...snapshot.nodes]\n          state.edges = [...snapshot.edges]\n          state.selectedNodeId = null\n        }\n      })\n    },\n  })),\n)\n\n// Initialize with a snapshot if store is empty\nif (useStudioStore.getState().history.length === 0) {\n  useStudioStore.getState().takeSnapshot()\n}\n","type":"registry:block","target":"~/stores/studio-store.ts"},{"path":"components/global/loading-indicator.tsx","content":"import { Loader2 } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface LoadingIndicatorProps {\n  text?: string\n  className?: string\n  iconClassName?: string\n  textClassName?: string\n  fullScreen?: boolean\n}\n\nexport function LoadingIndicator({\n  text = \"Carregando detalhes...\",\n  className,\n  iconClassName,\n  textClassName,\n  fullScreen = false,\n}: LoadingIndicatorProps) {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center space-y-2\",\n        fullScreen && \"fixed inset-0 bg-background/80 z-50\",\n        className,\n      )}\n      aria-live=\"polite\"\n      aria-busy=\"true\"\n    >\n      <Loader2 className={cn(\"h-8 w-8 animate-spin text-primary\", iconClassName)} />\n      <p className={cn(\"text-sm text-muted-foreground\", textClassName)}>{text}</p>\n    </div>\n  )\n}\n","type":"registry:component"},{"path":"app/(dashboard)/example-loading-page.tsx","content":"import { LoadingIndicator } from \"@/components/global/loading-indicator\"\n\nexport default function ExampleLoadingPage() {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-10 border rounded-lg min-h-[300px]\">\n      <h2 className=\"text-xl font-semibold mb-6\">Página de Exemplo com Loading</h2>\n\n      <p className=\"text-muted-foreground mb-4\">Abaixo está um indicador de loading simples:</p>\n      <LoadingIndicator text=\"Buscando informações do agente...\" />\n\n      <p className=\"text-muted-foreground mt-8 mb-4\">Indicador de loading em tela cheia (simulado em um container):</p>\n      <div className=\"relative w-full h-64 border rounded-md overflow-hidden bg-background\">\n        <LoadingIndicator fullScreen text=\"Processando seu fluxo...\" />\n        <div className=\"p-4\">\n          <p className=\"text-sm\">Conteúdo da página por baixo do loader...</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","type":"registry:block","target":"~/app/(dashboard)/example-loading-page.tsx"}],"tailwind":{},"cssVars":{},"meta":{"importSpecifier":"","moduleSpecifier":"","nextVersion":"15.2.4"},"docs":"Please review v0-generated code before incorporating it into your project to ensure completeness and accuracy."}