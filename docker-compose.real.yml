version: "3.9"

services:
  # PostgreSQL Database (Supabase local)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agentes_conversao
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/api/supabase/complete-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis (Cache + Queues)
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # LiteLLM Gateway (Multi-model AI)
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/agentes_conversao
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-master-dev}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      # AI Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY}
    volumes:
      - ./config/litellm_config.yaml:/app/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["--config", "/app/config.yaml", "--port", "4000"]
    networks:
      - app-network

  # FastAPI Backend + LangChain
  backend:
    build:
      context: ./services/api
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/agentes_conversao
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      # LiteLLM
      LITELLM_URL: http://litellm:4000
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-master-dev}
      # Auth
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
      # Evolution API (WhatsApp)
      EVOLUTION_API_URL: ${EVOLUTION_API_URL}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
      # MCP Configuration
      MCP_CONFIG_PATH: /app/config/mcp_config.json
    volumes:
      - ./services/api:/app
      - ./config/mcp_config.json:/app/config/mcp_config.json
    depends_on:
      - postgres
      - redis
      - litellm
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - app-network

  # Next.js Frontend (Dashboard)
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - app-network

  # BullMQ Worker (Queue Processing)
  worker:
    build:
      context: ./services/api
      dockerfile: Dockerfile.worker
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/agentes_conversao
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      LITELLM_URL: http://litellm:4000
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-master-dev}
      EVOLUTION_API_URL: ${EVOLUTION_API_URL}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
    volumes:
      - ./services/api:/app
    depends_on:
      - postgres
      - redis
      - litellm
    command: ["python", "-m", "app.workers.message_processor"]
    networks:
      - app-network

  # Qdrant Vector Database (Knowledge Base)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - app-network

  # Jarvis AI Manager (Analytics & Optimization)
  jarvis:
    build:
      context: ./services/jarvis
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/agentes_conversao
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
      LITELLM_URL: http://litellm:4000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
      - litellm
    networks:
      - app-network

  # Evolution API Instance (WhatsApp)
  # Nota: Em produção, usar Evolution API hospedada
  evolution:
    image: atendai/evolution-api:latest
    ports:
      - "8080:8080"
    environment:
      AUTHENTICATION_TYPE: apikey
      AUTHENTICATION_API_KEY: ${EVOLUTION_API_KEY}
      AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES: true
      WEBHOOK_GLOBAL_URL: http://backend:8000/webhooks/evolution
      WEBHOOK_GLOBAL_ENABLED: true
      DATABASE_ENABLED: true
      DATABASE_CONNECTION_URI: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/evolution
      REDIS_ENABLED: true
      REDIS_URI: redis://default:${REDIS_PASSWORD:-redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # BullBoard (Queue Dashboard)
  bullboard:
    image: deadly0/bull-board:latest
    ports:
      - "3010:3000"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    depends_on:
      - redis
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  qdrant_data:

networks:
  app-network:
    driver: bridge
